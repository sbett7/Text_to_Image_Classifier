from SH.ImageClass_Colour import ImageClass as Ic
import numpy as np
import hdidx
from scipy.sparse import csr_matrix
import csv


class HdidxClass:
    # STATIC Variables
    ID = 0
    SENTIMENT = 1
    TEXT = 2
    _text_image_list = []
    queryVal = []
    data = np.zeros((1, 1))
    queryData = np.zeros((1, 1))
    lengthOfData = 0
    maximumColumns = 0
    X = csr_matrix(0)
    lsh = []
    nBits = 0
    _use_smoothed_image =False
    _full_images = False
    _gray_scale = False
    _color_images = False
    _image_shape = np.zeros((1, 1))

    textData = []

    def __init__(self, text_data, num_text_entries, hash_size=128, image_shape=(32, 70),
                 use_smoothed_image=False, full_images=False, gray_scale=False, color_images=False):
        '''
        Creates a SH handler class to create, query, and generate binary codes from a SH object.
        This class can be used to perform manual querying of the constructed SH indexer, or can be used to
        retrieve binary codes from a given set of _text.  It can also be used as a Sentiment Classifier based off of the
        averaged sentiment returned from the SH Indexer.
        :param text_data: A list of string with the
        :param num_text_entries: The number of entries that are to be stored in the SH Indexer
        :param image_shape: The shape of the images that are
        :param hash_size: The size of the binary code that is generated by the SH Indexer
        :param full_images: A boolean that specifies whether images will fill the image with a sample
         _text until it has been completely filled.
        :param gray_scale: A boolean that specifies whether an image will be generated as gray_scale or smoothed.
        If color_images is True, the resulting image will be smoothed
        :param color_images: A boolean to specify whether the generated image will be RGB or Binary.
        If True, the image will be an RGB image.
        '''
        self.nBits = hash_size
        self._image_shape = image_shape
        self._use_smoothed_image = use_smoothed_image
        self.lengthOfData = num_text_entries
        self._full_images = full_images
        self._gray_scale = gray_scale
        self._color_images = color_images
        self.get_data(text_data, num_data_rows=num_text_entries)
        self.initialise_data_array()
        self.configure_sh_matrix(hash_size)

    def get_data(self, text_data, num_data_rows=5000):
        '''
        Store _text _processed_data as ImageClass object
        :param text_data: The _text _processed_data that is to be added to the Indexer.
        :param num_data_rows: The number of entries that are to be added to the Indexer.
        :return: None
        '''

        for i in range(0, num_data_rows - 1):
            self._text_image_list.append(Ic(text_data[i], 0, image_shape=self._image_shape,
                                            is_colour=self._color_images, gray_scale=self._gray_scale,
                                            full_image=self._full_images))

    def get_data_row(self, index):
        '''
        Get a specific _text string  based upon the provided index.
        :param index: An index for the requested set of _text.
        :return: a _text string for the specified index.
        '''
        return self.textData[index]

    def initialise_data_array(self):
        '''
        Intialises the data array that will be fed to the SH Index.
        :return: None
        '''
        # initialise processed data array
        self.data = np.zeros((len(self._text_image_list), self.maximumColumns))
        i = 0
        for row in self._text_image_list:
            if self._use_smoothed_image:
                dat = row.get_smoothed_image_vector()
            else:
                dat = row.get_image_vector()
            for j in range(0, row.image_shape[1]):
                self.data[i][j] = dat[0][j]

            i = i + 1

    def initialise_query_array(self):
        '''
        Intialises the query array that will be used to query the SH Index.
        :return:
        '''
        # initialise query data array
        self.queryData = np.zeros((1, self.maximumColumns))
        dat = self.queryVal.get_image_vector()
        for j in range(0, self.queryVal._image_shape[1]):
            self.queryData[0][j] = dat[0][j]

    def query(self, text, num_queries, id_val, image_shape, full_image=False,
              gray_scale=False, color_image=False):
        '''
        Queries the SH index with the specified _text and image configurations.
        :param text: The _text string that is to be used to query the SH Index.
        :param num_queries: The number of results returned by the query.
        :param id_val: The ID for the _text.
        :param image_shape: The shape of the generated Image
        :param full_image: A boolean that specifies whether images will fill the image with a sample
         _text until it has been completely filled.
        :param gray_scale: A boolean that specifies whether an image will be generated as gray_scale or smoothed.
        If color_images is True, the resulting image will be smoothed
        :param color_image: A boolean to specify whether the generated image will be RGB or Binary.
        If True, the image will be an RGB image.
        :return: The results vector from the SH Index.
        '''
        self.initialise_data_array()
        self._query_val = Ic(text, id_val=id_val, image_shape=image_shape, full_image=full_image,
                             gray_scale=gray_scale, is_colour=color_image)
        self.initialise_query_array()
        try:
            ids, dis = self.idx.search(self.queryData, num_queries)
        except ValueError:
            self.configure_sh_matrix(self.nBits)
            ids, dis = self.idx.search(self.queryData, num_queries)
        return ids, dis

    def configure_sh_matrix(self, nbits):
        '''
        Configures the SH Indexer object with the hash sizes and hash tables.
        :param nbits: The size of the binary codes that will be returned from the SH hashing function.
        :return: None
        '''
        self.X = csr_matrix(self.data)

        # create SH Indexer
        self.idx = hdidx.indexer.SHIndexer()
        # build indexer
        self.idx.build({'vals': self.data, 'nbits': nbits})
        # add database items to the indexer
        self.idx.add(self.data)

    def configure_query_matrix(self):
        '''
        Configures the query matrix into a form that can be fed into the Index.
        :return: SciPy CSR_Matrix object of the query data.
        '''
        return csr_matrix(self.queryData)

    def get_sentiment_of_text(self, text, num_returned_results=5, text_id=0, image_shape=10, threshold=0.5,
                              full_image=False, gray_scale=False, color_image=False):
        '''
        Determines the sentiment of given _text by determining the average sentiment from the queried results.
        :param text: A string of _text that is to be used to query the Index to determine its sentiment.
        :param num_returned_results: The number of results that a query returns.
        :param text_id: The ID of a given set of _text.  This is used if their is a specific ID associated with the _text
        data.
        :param image_shape: The shape of the image that the _text will be converted to.
        :param threshold: The threshold that will be used to determine if the sentiment of the _text is positive or
         negative.  If the average sentiment of the returned results is above or equal to the threshold, it will return
         a positive sentiment (True), otherwise it will return a negative sentiment (False).
        :param full_image: A boolean that specifies whether images will fill the image with a sample
         _text until it has been completely filled.
        :param gray_scale: A boolean that specifies whether an image will be generated as gray_scale or smoothed.
        If color_images is True, the resulting image will be smoothed
        :param color_image: A boolean to specify whether the generated image will be RGB or Binary.
        If True, the image will be an RGB image.
        :return: A boolean to indicate whether the sentiment is positive or negative.  If True, the sentiment of the
        _text is positive. If False, the sentiment of the _text is negative.
        '''
        ids, dis = self.query(text, num_returned_results, text_id, image_shape, full_image=full_image,
                            gray_scale=gray_scale, color_image=color_image)
        queried_data = []

        for i in ids[0]:
            queried_data.append(self._text_image_list[i])

        average = self.get_average_sentiment(queried_data, num_returned_results, self._text_image_list)
        if average >= threshold:
            return True
        else:
            return False

    def get_query_code(self, text, id_val, image_shape, full_image=False, gray_scale=False, color_image=False):
        '''
        Gets the binary code representation of a given _text string that has been converted into an image based upon the
        given image configuration.
        :param text: A string of _text that is to be used to get a binary code based on the image
         generated from the _text.
        :param image_shape: The shape of the image that the _text will be converted to.
        :param id_val: The ID for the _text.
        :param full_image: A boolean that specifies whether images will fill the image with a sample
         _text until it has been completely filled.
        :param gray_scale: A boolean that specifies whether an image will be generated as gray_scale or smoothed.
        If color_images is True, the resulting image will be smoothed
        :param color_image: A boolean to specify whether the generated image will be RGB or Binary.
        If True, the image will be an RGB image.
        :return: The binary code representation of the provided _text that has been converted into an image
        '''
        self.queryVal = Ic(text, id_val, image_shape=image_shape, gray_scale=gray_scale,
                           full_image=full_image, is_colour=color_image)

        self.initialise_query_array()
        try:
            query_encode = self.idx.get_encoding(self.queryData)
        except ValueError:
            query_encode = self.idx.get_encoding(self.queryData)
        return query_encode

    @staticmethod
    def read_in_text_data(file_location):
        '''
        Reads in data from a specified _text file.
        :param file_location: The location of the file to retrieve the data from.
        :return: A list with all of the data entries.
        '''
        text_data = []
        with open(file_location, 'rb') as csvfile:
            reader = csv.reader(csvfile, delimiter=',', quotechar='|')
            for row in reader:
                text_data.append(row)
        return text_data

    @staticmethod
    def get_average_sentiment(queried_data, num_queries, row_data):
        '''
        Averages the sentiment of all of the returned results.
        :param queried_data: An array of all results that were retrieved from the SH Index query.
        :param num_queries: The number of returned results.
        :param row_data: ImageClass Row Data.
        :return: A float containing the averaged result of the returned sentiments.
        '''
        average = 0
        try:
            for data in queried_data[0]:
                average = average + row_data[data].sentiment
            return float(average)/num_queries
        except TypeError:
            print("error")
